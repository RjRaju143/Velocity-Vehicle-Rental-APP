# Stage 1: Build the application
FROM node:20-alpine AS builder
WORKDIR /app

# Install dependencies
COPY package.json package-lock.json ./
# Using --legacy-peer-deps for broader compatibility if needed, but try without first.
# If issues arise, consider: RUN npm install --legacy-peer-deps
RUN npm install

# Copy application code (velocity.sqlite is included in this copy)
COPY . .

# Set production environment for build
ENV NODE_ENV production

# Build the Next.js application (this will create the .next/standalone directory)
RUN npm run build

# Stage 2: Create the production image
FROM node:20-alpine AS runner
WORKDIR /app

# Accept build argument for Google API Key
ARG GOOGLE_API_KEY

ENV NODE_ENV production
ENV NEXT_TELEMETRY_DISABLED 1
ENV PORT 3000
ENV GOOGLE_API_KEY=${GOOGLE_API_KEY}

# Create a non-root user and group for security
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Copy necessary files from the builder stage
# The standalone output copies server.js, .next/static, and public into respective locations.
# Copy the standalone server files
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
# Copy static assets
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static
# Copy public assets
COPY --from=builder --chown=nextjs:nodejs /app/public ./public

# Copy your SQLite database
COPY --from=builder --chown=nextjs:nodejs /app/velocity.sqlite ./velocity.sqlite

# Set the user to the non-root user
USER nextjs

EXPOSE 3000

# Command to run the Next.js application
# The server.js file is generated by the standalone output and placed in the CWD (/app)
CMD ["node", "server.js"]
